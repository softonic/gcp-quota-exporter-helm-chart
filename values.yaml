# Default values for gcp-quota-exporter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# desired number of pods
replicaCount: 1

image:
  # container image repository
  repository: mintel/gcp-quota-exporter
  # container image pull policy
  pullPolicy: IfNotPresent
  # container image tag
  tag: ""

# container image pull secrets
imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

# Google Cloud Platform project name to scrape data from
gcpProject: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # type of service to create
  type: ClusterIP
  # port for the http service
  port: 80

ingress:
  # enable or disable ingress
  enabled: false
  # ingress annotations
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # Hosts to configure the ingress
  hosts:
    - host: chart-example.local
      paths: []
  # TLS certificate info defined here
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# name of the secret that contains the service account needed to get the data from GCP
serviceAccountSecret: gcp-quota-sa


livenessProbe:
  failureThreshold: 3
  httpGet:
    path: /metrics
    port: http
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

readinessProbe:
  failureThreshold: 3
  httpGet:
    path: /metrics
    port: http
    scheme: HTTP
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# If you don't use prometheus operator you could use some annotations to use the Prometheus SD
annotations: {}
#  prometheus.io/scrape: "true"
#  prometheus.io/port: "9592"

podLabels: {}

# Enable this if you're using https://github.com/coreos/prometheus-operator
serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: false
  # Set the namespace the ServiceMonitor should be deployed
  namespace: null
  # additionalLabels is the set of additional labels to add to the ServiceMonitor
  additionalLabels: {}
  # Set how frequently Prometheus should scrape
  # interval: 30s
  interval: null
  # Default port to scrape
  targetPort: http
  # Set path to exporter telemetry-path
  # path: /metrics
  path: null
  # Set timeout for scrape
  # timeout: 10s
  timeout: null
  ## Defaults to what's used if you follow CoreOS [Prometheus Install Instructions](https://github.com/helm/charts/tree/master/stable/prometheus-operator#tldr)
  honorLabels: true
